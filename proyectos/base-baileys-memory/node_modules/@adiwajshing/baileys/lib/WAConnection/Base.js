"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const QR = __importStar(require("qrcode-terminal"));
const fs = __importStar(require("fs"));
const Utils = __importStar(require("./Utils"));
const Encoder_1 = __importDefault(require("../Binary/Encoder"));
const Decoder_1 = __importDefault(require("../Binary/Decoder"));
const Constants_1 = require("./Constants");
/** Generate a QR code from the ref & the curve public key. This is scanned by the phone */
const generateQRCode = function ([ref, publicKey, clientID]) {
    const str = ref + ',' + publicKey + ',' + clientID;
    QR.generate(str, { small: true });
};
class WAConnectionBase {
    constructor() {
        /** The version of WhatsApp Web we're telling the servers we are */
        this.version = [2, 2027, 10];
        /** The Browser we're telling the WhatsApp Web servers we are */
        this.browserDescription = Utils.Browsers.baileys('Chrome');
        /** Metadata like WhatsApp id, name set on WhatsApp etc. */
        this.userMetaData = { id: null, name: null, phone: null };
        /** Should reconnect automatically after an unexpected disconnect */
        this.autoReconnect = true;
        this.lastSeen = null;
        /** What level of messages to log to the console */
        this.logLevel = Constants_1.MessageLogLevel.info;
        /** Should requests be queued when the connection breaks in between; if false, then an error will be thrown */
        this.pendingRequestTimeoutMs = null;
        this.connectionMode = Constants_1.WAConnectionMode.onlyRequireValidation;
        /** What to do when you need the phone to authenticate the connection (generate QR code by default) */
        this.onReadyForPhoneAuthentication = generateQRCode;
        /** Data structure of tokens & IDs used to establish one's identiy to WhatsApp Web */
        this.authInfo = {
            clientID: null,
            serverToken: null,
            clientToken: null,
            encKey: null,
            macKey: null,
        };
        /** The websocket connection */
        this.conn = null;
        this.msgCount = 0;
        this.callbacks = {};
        this.encoder = new Encoder_1.default();
        this.decoder = new Decoder_1.default();
        this.pendingRequests = [];
        this.referenceDate = new Date(); // used for generating tags
        this.userAgentString = Utils.userAgentString(this.browserDescription[1]);
        this.registerCallback(['Cmd', 'type:disconnect'], json => this.unexpectedDisconnect(json[1].kind));
    }
    async unexpectedDisconnect(error) {
        this.close();
        if ((error === 'lost' || error === 'closed') && this.autoReconnect) {
            await this.reconnectLoop();
        }
        else if (this.unexpectedDisconnectCallback) {
            this.unexpectedDisconnectCallback(error);
        }
    }
    /** Set the callback for unexpected disconnects including take over events, log out events etc. */
    setOnUnexpectedDisconnect(callback) {
        this.unexpectedDisconnectCallback = callback;
    }
    /**
     * base 64 encode the authentication credentials and return them
     * these can then be used to login again by passing the object to the connect () function.
     * @see connect () in WhatsAppWeb.Session
     */
    base64EncodedAuthInfo() {
        return {
            clientID: this.authInfo.clientID,
            serverToken: this.authInfo.serverToken,
            clientToken: this.authInfo.clientToken,
            encKey: this.authInfo.encKey.toString('base64'),
            macKey: this.authInfo.macKey.toString('base64'),
        };
    }
    /**
     * Clear authentication info so a new connection can be created
     */
    clearAuthInfo() {
        this.authInfo = {
            clientID: null,
            serverToken: null,
            clientToken: null,
            encKey: null,
            macKey: null,
        };
    }
    /**
     * Load in the authentication credentials
     * @param authInfo the authentication credentials or path to auth credentials JSON
     */
    loadAuthInfoFromBase64(authInfo) {
        if (!authInfo) {
            throw new Error('given authInfo is null');
        }
        if (typeof authInfo === 'string') {
            this.log(`loading authentication credentials from ${authInfo}`, Constants_1.MessageLogLevel.info);
            const file = fs.readFileSync(authInfo, { encoding: 'utf-8' }); // load a closed session back if it exists
            authInfo = JSON.parse(file);
        }
        this.authInfo = {
            clientID: authInfo.clientID,
            serverToken: authInfo.serverToken,
            clientToken: authInfo.clientToken,
            encKey: Buffer.from(authInfo.encKey, 'base64'),
            macKey: Buffer.from(authInfo.macKey, 'base64'),
        };
    }
    /**
     * Load in the authentication credentials
     * @param authInfo the authentication credentials or path to browser credentials JSON
     */
    loadAuthInfoFromBrowser(authInfo) {
        if (!authInfo)
            throw new Error('given authInfo is null');
        if (typeof authInfo === 'string') {
            this.log(`loading authentication credentials from ${authInfo}`, Constants_1.MessageLogLevel.info);
            const file = fs.readFileSync(authInfo, { encoding: 'utf-8' }); // load a closed session back if it exists
            authInfo = JSON.parse(file);
        }
        const secretBundle = typeof authInfo === 'string' ? JSON.parse(authInfo) : authInfo;
        this.authInfo = {
            clientID: authInfo.WABrowserId.replace(/\"/g, ''),
            serverToken: authInfo.WAToken2.replace(/\"/g, ''),
            clientToken: authInfo.WAToken1.replace(/\"/g, ''),
            encKey: Buffer.from(secretBundle.encKey, 'base64'),
            macKey: Buffer.from(secretBundle.macKey, 'base64'),
        };
    }
    /**
     * Register for a callback for a certain function, will cancel automatically after one execution
     * @param {[string, object, string] | string} parameters name of the function along with some optional specific parameters
     */
    async registerCallbackOneTime(parameters) {
        const json = await new Promise((resolve, _) => this.registerCallback(parameters, resolve));
        this.deregisterCallback(parameters);
        return json;
    }
    /**
     * Register for a callback for a certain function
     * @param parameters name of the function along with some optional specific parameters
     */
    registerCallback(parameters, callback) {
        if (typeof parameters === 'string') {
            return this.registerCallback([parameters, null, null], callback);
        }
        if (!Array.isArray(parameters)) {
            throw new Error('parameters (' + parameters + ') must be a string or array');
        }
        const func = 'function:' + parameters[0];
        const key = parameters[1] || '';
        const key2 = parameters[2] || '';
        if (!this.callbacks[func]) {
            this.callbacks[func] = {};
        }
        if (!this.callbacks[func][key]) {
            this.callbacks[func][key] = {};
        }
        this.callbacks[func][key][key2] = callback;
    }
    /**
     * Cancel all further callback events associated with the given parameters
     * @param parameters name of the function along with some optional specific parameters
     */
    deregisterCallback(parameters) {
        if (typeof parameters === 'string') {
            return this.deregisterCallback([parameters]);
        }
        if (!Array.isArray(parameters)) {
            throw new Error('parameters (' + parameters + ') must be a string or array');
        }
        const func = 'function:' + parameters[0];
        const key = parameters[1] || '';
        const key2 = parameters[2] || '';
        if (this.callbacks[func] && this.callbacks[func][key] && this.callbacks[func][key][key2]) {
            delete this.callbacks[func][key][key2];
            return;
        }
        this.log('WARNING: could not find ' + JSON.stringify(parameters) + ' to deregister', Constants_1.MessageLogLevel.info);
    }
    /**
     * Wait for a message with a certain tag to be received
     * @param tag the message tag to await
     * @param json query that was sent
     * @param timeoutMs timeout after which the promise will reject
     */
    async waitForMessage(tag, json = null, timeoutMs = null) {
        let promise = new Promise((resolve, reject) => (this.callbacks[tag] = { queryJSON: json, callback: resolve, errCallback: reject }));
        if (timeoutMs) {
            promise = Utils.promiseTimeout(timeoutMs, promise).catch((err) => {
                delete this.callbacks[tag];
                throw err;
            });
        }
        return promise;
    }
    /**
     * Query something from the WhatsApp servers and error on a non-200 status
     * @param json the query itself
     * @param [binaryTags] the tags to attach if the query is supposed to be sent encoded in binary
     * @param [timeoutMs] timeout after which the query will be failed (set to null to disable a timeout)
     * @param [tag] the tag to attach to the message
     * recieved JSON
     */
    async queryExpecting200(json, binaryTags = null, timeoutMs = null, tag = null) {
        const response = await this.query(json, binaryTags, timeoutMs, tag);
        if (response.status && Math.floor(+response.status / 100) !== 2) {
            throw new Constants_1.BaileysError(`Unexpected status code: ${response.status}`, { query: json });
        }
        return response;
    }
    /**
     * Query something from the WhatsApp servers
     * @param json the query itself
     * @param binaryTags the tags to attach if the query is supposed to be sent encoded in binary
     * @param timeoutMs timeout after which the query will be failed (set to null to disable a timeout)
     * @param tag the tag to attach to the message
     * recieved JSON
     */
    async query(json, binaryTags = null, timeoutMs = null, tag = null) {
        if (binaryTags)
            tag = await this.sendBinary(json, binaryTags, tag);
        else
            tag = await this.sendJSON(json, tag);
        return this.waitForMessage(tag, json, timeoutMs);
    }
    /**
     * Send a binary encoded message
     * @param json the message to encode & send
     * @param tags the binary tags to tell WhatsApp what the message is all about
     * @param tag the tag to attach to the message
     * @return the message tag
     */
    async sendBinary(json, tags, tag) {
        if (!this.conn)
            await this.waitForConnection();
        const binary = this.encoder.write(json); // encode the JSON to the WhatsApp binary format
        let buff = Utils.aesEncrypt(binary, this.authInfo.encKey); // encrypt it using AES and our encKey
        const sign = Utils.hmacSign(buff, this.authInfo.macKey); // sign the message using HMAC and our macKey
        tag = tag || this.generateMessageTag();
        buff = Buffer.concat([
            Buffer.from(tag + ','),
            Buffer.from(tags),
            sign,
            buff,
        ]);
        await this.send(buff); // send it off
        return tag;
    }
    /**
     * Send a plain JSON message to the WhatsApp servers
     * @param json the message to send
     * @param tag the tag to attach to the message
     * @return the message tag
     */
    async sendJSON(json, tag = null) {
        tag = tag || this.generateMessageTag();
        await this.send(tag + ',' + JSON.stringify(json));
        return tag;
    }
    /** Send some message to the WhatsApp servers */
    async send(m) {
        if (!this.conn)
            await this.waitForConnection();
        this.msgCount += 1; // increment message count, it makes the 'epoch' field when sending binary messages
        return this.conn.send(m);
    }
    async waitForConnection() {
        const timeout = this.pendingRequestTimeoutMs;
        try {
            const task = new Promise(resolve => this.pendingRequests.push(resolve));
            await Utils.promiseTimeout(timeout, task);
        }
        catch (_a) {
            throw new Error('cannot send message, disconnected from WhatsApp');
        }
    }
    /**
     * Disconnect from the phone. Your auth credentials become invalid after sending a disconnect request.
     * @see close() if you just want to close the connection
     */
    async logout() {
        if (!this.conn)
            throw new Error("You're not even connected, you can't log out");
        await new Promise(resolve => this.conn.send('goodbye,["admin","Conn","disconnect"]', null, resolve));
        this.authInfo = null;
        this.close();
    }
    /** Close the connection to WhatsApp Web */
    close() {
        this.msgCount = 0;
        if (this.conn) {
            this.conn.removeAllListeners('close');
            this.conn.close();
            this.conn = null;
        }
        const keys = Object.keys(this.callbacks);
        keys.forEach(key => {
            if (!key.includes('function:')) {
                this.callbacks[key].errCallback('connection closed');
                delete this.callbacks[key];
            }
        });
        if (this.keepAliveReq) {
            clearInterval(this.keepAliveReq);
        }
    }
    generateMessageTag() {
        return `${Math.round(this.referenceDate.getTime()) / 1000}.--${this.msgCount}`;
    }
    log(text, level) {
        if (this.logLevel >= level)
            console.log(`[Baileys][${new Date().toLocaleString()}] ${text}`);
    }
}
exports.default = WAConnectionBase;
