/// <reference types="node" />
import Decoder from '../Binary/Decoder';
import { WAChat } from './Constants';
export declare const Browsers: {
    ubuntu: (browser: any) => [string, string, string];
    macOS: (browser: any) => [string, string, string];
    baileys: (browser: any) => [string, string, string];
    /** The appropriate browser based on your OS & release */
    appropriate: (browser: any) => [string, string, string];
};
export declare const waChatUniqueKey: (c: WAChat) => number;
export declare function userAgentString(browser: any): any;
/** decrypt AES 256 CBC; where the IV is prefixed to the buffer */
export declare function aesDecrypt(buffer: Buffer, key: Buffer): Buffer;
/** decrypt AES 256 CBC */
export declare function aesDecryptWithIV(buffer: Buffer, key: Buffer, IV: Buffer): Buffer;
export declare function aesEncrypt(buffer: Buffer, key: Buffer): Buffer;
export declare function aesEncrypWithIV(buffer: Buffer, key: Buffer, IV: Buffer): Buffer;
export declare function hmacSign(buffer: Buffer, key: Buffer): Buffer;
export declare function sha256(buffer: Buffer): Buffer;
export declare function hkdf(buffer: Buffer, expandedLength: number, info?: any): Buffer;
export declare function randomBytes(length: any): Buffer;
export declare const createTimeout: (timeout: any) => Promise<unknown>;
export declare function promiseTimeout<T>(ms: number, promise: Promise<T>): Promise<T>;
export declare function generateMessageTag(epoch?: number): string;
export declare function generateClientID(): string;
export declare function generateMessageID(): string;
export declare function decryptWA(message: any, macKey: Buffer, encKey: Buffer, decoder: Decoder, fromMe?: boolean): [string, Object, [number, number]?];
