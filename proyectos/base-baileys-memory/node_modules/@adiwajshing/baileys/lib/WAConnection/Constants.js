"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WAFlag = exports.WAMetric = exports.WAConnectionMode = exports.MessageLogLevel = exports.BaileysError = void 0;
class BaileysError extends Error {
    constructor(message, context) {
        super(message);
        this.name = 'BaileysError';
        this.status = context.status;
        this.context = context;
    }
}
exports.BaileysError = BaileysError;
var MessageLogLevel;
(function (MessageLogLevel) {
    MessageLogLevel[MessageLogLevel["none"] = 0] = "none";
    MessageLogLevel[MessageLogLevel["info"] = 1] = "info";
    MessageLogLevel[MessageLogLevel["unhandled"] = 2] = "unhandled";
    MessageLogLevel[MessageLogLevel["all"] = 3] = "all";
})(MessageLogLevel = exports.MessageLogLevel || (exports.MessageLogLevel = {}));
var WAConnectionMode;
(function (WAConnectionMode) {
    /** Baileys will let requests through after a simple connect */
    WAConnectionMode[WAConnectionMode["onlyRequireValidation"] = 0] = "onlyRequireValidation";
    /** Baileys will let requests through only after chats & contacts are received */
    WAConnectionMode[WAConnectionMode["requireChatsAndContacts"] = 1] = "requireChatsAndContacts";
})(WAConnectionMode = exports.WAConnectionMode || (exports.WAConnectionMode = {}));
var WAMetric;
(function (WAMetric) {
    WAMetric[WAMetric["debugLog"] = 1] = "debugLog";
    WAMetric[WAMetric["queryResume"] = 2] = "queryResume";
    WAMetric[WAMetric["liveLocation"] = 3] = "liveLocation";
    WAMetric[WAMetric["queryMedia"] = 4] = "queryMedia";
    WAMetric[WAMetric["queryChat"] = 5] = "queryChat";
    WAMetric[WAMetric["queryContact"] = 6] = "queryContact";
    WAMetric[WAMetric["queryMessages"] = 7] = "queryMessages";
    WAMetric[WAMetric["presence"] = 8] = "presence";
    WAMetric[WAMetric["presenceSubscribe"] = 9] = "presenceSubscribe";
    WAMetric[WAMetric["group"] = 10] = "group";
    WAMetric[WAMetric["read"] = 11] = "read";
    WAMetric[WAMetric["chat"] = 12] = "chat";
    WAMetric[WAMetric["received"] = 13] = "received";
    WAMetric[WAMetric["picture"] = 14] = "picture";
    WAMetric[WAMetric["status"] = 15] = "status";
    WAMetric[WAMetric["message"] = 16] = "message";
    WAMetric[WAMetric["queryActions"] = 17] = "queryActions";
    WAMetric[WAMetric["block"] = 18] = "block";
    WAMetric[WAMetric["queryGroup"] = 19] = "queryGroup";
    WAMetric[WAMetric["queryPreview"] = 20] = "queryPreview";
    WAMetric[WAMetric["queryEmoji"] = 21] = "queryEmoji";
    WAMetric[WAMetric["queryVCard"] = 29] = "queryVCard";
    WAMetric[WAMetric["queryStatus"] = 30] = "queryStatus";
    WAMetric[WAMetric["queryStatusUpdate"] = 31] = "queryStatusUpdate";
    WAMetric[WAMetric["queryLiveLocation"] = 33] = "queryLiveLocation";
    WAMetric[WAMetric["queryLabel"] = 36] = "queryLabel";
    WAMetric[WAMetric["queryQuickReply"] = 39] = "queryQuickReply";
})(WAMetric = exports.WAMetric || (exports.WAMetric = {}));
var WAFlag;
(function (WAFlag) {
    WAFlag[WAFlag["ignore"] = 128] = "ignore";
    WAFlag[WAFlag["acknowledge"] = 64] = "acknowledge";
    WAFlag[WAFlag["available"] = 32] = "available";
    WAFlag[WAFlag["unavailable"] = 16] = "unavailable";
    WAFlag[WAFlag["expires"] = 8] = "expires";
    WAFlag[WAFlag["skipOffline"] = 4] = "skipOffline";
})(WAFlag = exports.WAFlag || (exports.WAFlag = {}));
exports.WAMessageProto = __importStar(require("../../WAMessage/WAMessage"));
