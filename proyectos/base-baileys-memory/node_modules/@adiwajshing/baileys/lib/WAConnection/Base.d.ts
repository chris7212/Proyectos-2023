/// <reference types="node" />
import WS from 'ws';
import Encoder from '../Binary/Encoder';
import Decoder from '../Binary/Decoder';
import { AuthenticationCredentials, UserMetaData, WANode, AuthenticationCredentialsBase64, WATag, MessageLogLevel, AuthenticationCredentialsBrowser, WAConnectionMode } from './Constants';
export default class WAConnectionBase {
    /** The version of WhatsApp Web we're telling the servers we are */
    version: [number, number, number];
    /** The Browser we're telling the WhatsApp Web servers we are */
    browserDescription: [string, string, string];
    /** Metadata like WhatsApp id, name set on WhatsApp etc. */
    userMetaData: UserMetaData;
    /** Should reconnect automatically after an unexpected disconnect */
    autoReconnect: boolean;
    lastSeen: Date;
    /** What level of messages to log to the console */
    logLevel: MessageLogLevel;
    /** Should requests be queued when the connection breaks in between; if false, then an error will be thrown */
    pendingRequestTimeoutMs: number;
    connectionMode: WAConnectionMode;
    /** What to do when you need the phone to authenticate the connection (generate QR code by default) */
    onReadyForPhoneAuthentication: ([ref, publicKey, clientID]: [any, any, any]) => void;
    protected unexpectedDisconnectCallback: (err: string) => any;
    /** Data structure of tokens & IDs used to establish one's identiy to WhatsApp Web */
    protected authInfo: AuthenticationCredentials;
    /** Curve keys to initially authenticate */
    protected curveKeys: {
        private: Uint8Array;
        public: Uint8Array;
    };
    /** The websocket connection */
    protected conn: WS;
    protected msgCount: number;
    protected keepAliveReq: NodeJS.Timeout;
    protected callbacks: {};
    protected encoder: Encoder;
    protected decoder: Decoder;
    protected pendingRequests: (() => void)[];
    protected reconnectLoop: () => Promise<void>;
    protected referenceDate: Date;
    protected userAgentString: string;
    constructor();
    unexpectedDisconnect(error: string): Promise<void>;
    /** Set the callback for unexpected disconnects including take over events, log out events etc. */
    setOnUnexpectedDisconnect(callback: (error: string) => void): void;
    /**
     * base 64 encode the authentication credentials and return them
     * these can then be used to login again by passing the object to the connect () function.
     * @see connect () in WhatsAppWeb.Session
     */
    base64EncodedAuthInfo(): {
        clientID: string;
        serverToken: string;
        clientToken: string;
        encKey: string;
        macKey: string;
    };
    /**
     * Clear authentication info so a new connection can be created
     */
    clearAuthInfo(): void;
    /**
     * Load in the authentication credentials
     * @param authInfo the authentication credentials or path to auth credentials JSON
     */
    loadAuthInfoFromBase64(authInfo: AuthenticationCredentialsBase64 | string): void;
    /**
     * Load in the authentication credentials
     * @param authInfo the authentication credentials or path to browser credentials JSON
     */
    loadAuthInfoFromBrowser(authInfo: AuthenticationCredentialsBrowser | string): void;
    /**
     * Register for a callback for a certain function, will cancel automatically after one execution
     * @param {[string, object, string] | string} parameters name of the function along with some optional specific parameters
     */
    registerCallbackOneTime(parameters: any): Promise<unknown>;
    /**
     * Register for a callback for a certain function
     * @param parameters name of the function along with some optional specific parameters
     */
    registerCallback(parameters: [string, string?, string?] | string, callback: any): any;
    /**
     * Cancel all further callback events associated with the given parameters
     * @param parameters name of the function along with some optional specific parameters
     */
    deregisterCallback(parameters: [string, string?, string?] | string): any;
    /**
     * Wait for a message with a certain tag to be received
     * @param tag the message tag to await
     * @param json query that was sent
     * @param timeoutMs timeout after which the promise will reject
     */
    waitForMessage(tag: string, json?: Object, timeoutMs?: number): Promise<any>;
    /**
     * Query something from the WhatsApp servers and error on a non-200 status
     * @param json the query itself
     * @param [binaryTags] the tags to attach if the query is supposed to be sent encoded in binary
     * @param [timeoutMs] timeout after which the query will be failed (set to null to disable a timeout)
     * @param [tag] the tag to attach to the message
     * recieved JSON
     */
    queryExpecting200(json: any[] | WANode, binaryTags?: WATag, timeoutMs?: number, tag?: string): Promise<any>;
    /**
     * Query something from the WhatsApp servers
     * @param json the query itself
     * @param binaryTags the tags to attach if the query is supposed to be sent encoded in binary
     * @param timeoutMs timeout after which the query will be failed (set to null to disable a timeout)
     * @param tag the tag to attach to the message
     * recieved JSON
     */
    query(json: any[] | WANode, binaryTags?: WATag, timeoutMs?: number, tag?: string): Promise<any>;
    /**
     * Send a binary encoded message
     * @param json the message to encode & send
     * @param tags the binary tags to tell WhatsApp what the message is all about
     * @param tag the tag to attach to the message
     * @return the message tag
     */
    protected sendBinary(json: WANode, tags: WATag, tag?: string): Promise<string>;
    /**
     * Send a plain JSON message to the WhatsApp servers
     * @param json the message to send
     * @param tag the tag to attach to the message
     * @return the message tag
     */
    protected sendJSON(json: any[] | WANode, tag?: string): Promise<string>;
    /** Send some message to the WhatsApp servers */
    protected send(m: any): Promise<void>;
    protected waitForConnection(): Promise<void>;
    /**
     * Disconnect from the phone. Your auth credentials become invalid after sending a disconnect request.
     * @see close() if you just want to close the connection
     */
    logout(): Promise<void>;
    /** Close the connection to WhatsApp Web */
    close(): void;
    generateMessageTag(): string;
    protected log(text: any, level: MessageLogLevel): void;
}
