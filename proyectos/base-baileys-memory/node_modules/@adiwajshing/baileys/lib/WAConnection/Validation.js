"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Curve = __importStar(require("curve25519-js"));
const Utils = __importStar(require("./Utils"));
const Base_1 = __importDefault(require("./Base"));
const Constants_1 = require("./Constants");
const WAClient_1 = require("../WAClient/WAClient");
class WAConnectionValidator extends Base_1.default {
    /** Authenticate the connection */
    async authenticate() {
        if (!this.authInfo.clientID) {
            // if no auth info is present, that is, a new session has to be established
            // generate a client ID
            this.authInfo = {
                clientID: Utils.generateClientID(),
                clientToken: null,
                serverToken: null,
                encKey: null,
                macKey: null,
            };
        }
        this.referenceDate = new Date(); // refresh reference date
        const data = ['admin', 'init', this.version, this.browserDescription, this.authInfo.clientID, true];
        return this.queryExpecting200(data)
            .then(json => {
            // we're trying to establish a new connection or are trying to log in
            if (this.authInfo.encKey && this.authInfo.macKey) {
                // if we have the info to restore a closed session
                const data = [
                    'admin',
                    'login',
                    this.authInfo.clientToken,
                    this.authInfo.serverToken,
                    this.authInfo.clientID,
                    'takeover',
                ];
                return this.query(data, null, null, 's1'); // wait for response with tag "s1"
            }
            return this.generateKeysForAuth(json.ref); // generate keys which will in turn be the QR
        })
            .then(async (json) => {
            var _a;
            if ('status' in json) {
                switch (json.status) {
                    case 401: // if the phone was unpaired
                        throw new Constants_1.BaileysError('unpaired from phone', json);
                    case 429: // request to login was denied, don't know why it happens
                        throw new Constants_1.BaileysError('request denied, try reconnecting', json);
                    default:
                        throw new Constants_1.BaileysError('unexpected status', json);
                }
            }
            // if its a challenge request (we get it when logging in)
            if ((_a = json[1]) === null || _a === void 0 ? void 0 : _a.challenge) {
                await this.respondToChallenge(json[1].challenge);
                return this.waitForMessage('s2', []);
            }
            // otherwise just chain the promise further
            return json;
        })
            .then(async (json) => {
            this.validateNewConnection(json[1]); // validate the connection
            this.log('validated connection successfully', Constants_1.MessageLogLevel.info);
            await this.sendPostConnectQueries();
            this.lastSeen = new Date(); // set last seen to right now
            return this.userMetaData;
        });
    }
    /**
     * Send the same queries WA Web sends after connect
     */
    async sendPostConnectQueries() {
        await this.sendBinary(['query', { type: 'contacts', epoch: '1' }, null], [Constants_1.WAMetric.queryContact, Constants_1.WAFlag.ignore]);
        await this.sendBinary(['query', { type: 'chat', epoch: '1' }, null], [Constants_1.WAMetric.queryChat, Constants_1.WAFlag.ignore]);
        await this.sendBinary(['query', { type: 'status', epoch: '1' }, null], [Constants_1.WAMetric.queryStatus, Constants_1.WAFlag.ignore]);
        await this.sendBinary(['query', { type: 'quick_reply', epoch: '1' }, null], [Constants_1.WAMetric.queryQuickReply, Constants_1.WAFlag.ignore]);
        await this.sendBinary(['query', { type: 'label', epoch: '1' }, null], [Constants_1.WAMetric.queryLabel, Constants_1.WAFlag.ignore]);
        await this.sendBinary(['query', { type: 'emoji', epoch: '1' }, null], [Constants_1.WAMetric.queryEmoji, Constants_1.WAFlag.ignore]);
        await this.sendBinary(['action', { type: 'set', epoch: '1' }, [['presence', { type: WAClient_1.Presence.available }, null]]], [Constants_1.WAMetric.presence, 160]);
    }
    /**
     * Refresh QR Code
     * @returns the new ref
     */
    async generateNewQRCode() {
        const data = ['admin', 'Conn', 'reref'];
        const response = await this.query(data);
        return response.ref;
    }
    /**
     * Once the QR code is scanned and we can validate our connection, or we resolved the challenge when logging back in
     * @private
     * @param {object} json
     */
    validateNewConnection(json) {
        const onValidationSuccess = () => {
            // set metadata: one's WhatsApp ID [cc][number]@s.whatsapp.net, name on WhatsApp, info about the phone
            this.userMetaData = {
                id: json.wid.replace('@c.us', '@s.whatsapp.net'),
                name: json.pushname,
                phone: json.phone,
            };
            return this.userMetaData;
        };
        if (json.connected) {
            // only if we're connected
            if (!json.secret) {
                // if we didn't get a secret, we don't need it, we're validated
                return onValidationSuccess();
            }
            const secret = Buffer.from(json.secret, 'base64');
            if (secret.length !== 144) {
                throw new Error('incorrect secret length received: ' + secret.length);
            }
            // generate shared key from our private key & the secret shared by the server
            const sharedKey = Curve.sharedKey(this.curveKeys.private, secret.slice(0, 32));
            // expand the key to 80 bytes using HKDF
            const expandedKey = Utils.hkdf(sharedKey, 80);
            // perform HMAC validation.
            const hmacValidationKey = expandedKey.slice(32, 64);
            const hmacValidationMessage = Buffer.concat([secret.slice(0, 32), secret.slice(64, secret.length)]);
            const hmac = Utils.hmacSign(hmacValidationMessage, hmacValidationKey);
            if (hmac.equals(secret.slice(32, 64))) {
                // computed HMAC should equal secret[32:64]
                // expandedKey[64:] + secret[64:] are the keys, encrypted using AES, that are used to encrypt/decrypt the messages recieved from WhatsApp
                // they are encrypted using key: expandedKey[0:32]
                const encryptedAESKeys = Buffer.concat([
                    expandedKey.slice(64, expandedKey.length),
                    secret.slice(64, secret.length),
                ]);
                const decryptedKeys = Utils.aesDecrypt(encryptedAESKeys, expandedKey.slice(0, 32));
                // set the credentials
                this.authInfo = {
                    encKey: decryptedKeys.slice(0, 32),
                    macKey: decryptedKeys.slice(32, 64),
                    clientToken: json.clientToken,
                    serverToken: json.serverToken,
                    clientID: this.authInfo.clientID,
                };
                return onValidationSuccess();
            }
            else {
                // if the checksums didn't match
                throw new Constants_1.BaileysError('HMAC validation failed', json);
            }
        }
        else {
            // if we didn't get the connected field (usually we get this message when one opens WhatsApp on their phone)
            throw new Constants_1.BaileysError(`invalid JSON`, json);
        }
    }
    /**
     * When logging back in (restoring a previously closed session), WhatsApp may challenge one to check if one still has the encryption keys
     * WhatsApp does that by asking for us to sign a string it sends with our macKey
     */
    respondToChallenge(challenge) {
        const bytes = Buffer.from(challenge, 'base64'); // decode the base64 encoded challenge string
        const signed = Utils.hmacSign(bytes, this.authInfo.macKey).toString('base64'); // sign the challenge string with our macKey
        const data = ['admin', 'challenge', signed, this.authInfo.serverToken, this.authInfo.clientID]; // prepare to send this signed string with the serverToken & clientID
        this.log('resolving login challenge', Constants_1.MessageLogLevel.info);
        return this.queryExpecting200(data);
    }
    /** When starting a new session, generate a QR code by generating a private/public key pair & the keys the server sends */
    async generateKeysForAuth(ref) {
        this.curveKeys = Curve.generateKeyPair(Utils.randomBytes(32));
        this.onReadyForPhoneAuthentication([
            ref,
            Buffer.from(this.curveKeys.public).toString('base64'),
            this.authInfo.clientID,
        ]);
        return this.waitForMessage('s1', []);
    }
}
exports.default = WAConnectionValidator;
