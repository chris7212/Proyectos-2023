/// <reference types="node" />
import { WA } from '../Binary/Constants';
import { proto } from '../../WAMessage/WAMessage';
export declare class BaileysError extends Error {
    status?: number;
    context: any;
    constructor(message: string, context: any);
}
export declare enum MessageLogLevel {
    none = 0,
    info = 1,
    unhandled = 2,
    all = 3
}
export interface AuthenticationCredentials {
    clientID: string;
    serverToken: string;
    clientToken: string;
    encKey: Buffer;
    macKey: Buffer;
}
export interface AuthenticationCredentialsBase64 {
    clientID: string;
    serverToken: string;
    clientToken: string;
    encKey: string;
    macKey: string;
}
export interface AuthenticationCredentialsBrowser {
    WABrowserId: string;
    WASecretBundle: {
        encKey: string;
        macKey: string;
    } | string;
    WAToken1: string;
    WAToken2: string;
}
export interface UserMetaData {
    id: string;
    name: string;
    phone: string;
}
export declare type WANode = WA.Node;
export declare type WAMessage = proto.WebMessageInfo;
export declare type WAMessageContent = proto.IMessage;
export declare enum WAConnectionMode {
    /** Baileys will let requests through after a simple connect */
    onlyRequireValidation = 0,
    /** Baileys will let requests through only after chats & contacts are received */
    requireChatsAndContacts = 1
}
export interface WAGroupCreateResponse {
    status: number;
    gid?: string;
    participants?: [{
        [key: string]: any;
    }];
}
export interface WAGroupMetadata {
    id: string;
    owner: string;
    subject: string;
    creation: number;
    desc?: string;
    descOwner?: string;
    descId?: string;
    participants: [{
        id: string;
        isAdmin: boolean;
        isSuperAdmin: boolean;
    }];
}
export interface WAGroupModification {
    status: number;
    participants?: {
        [key: string]: any;
    };
}
export interface WAContact {
    notify?: string;
    jid: string;
    name?: string;
    index?: string;
    short?: string;
}
export interface WAChat {
    t: string;
    count: number;
    archive?: 'true' | 'false';
    read_only?: 'true' | 'false';
    mute?: string;
    pin?: string;
    spam: 'false' | 'true';
    jid: string;
    modify_tag: string;
    messages: WAMessage[];
}
export declare enum WAMetric {
    debugLog = 1,
    queryResume = 2,
    liveLocation = 3,
    queryMedia = 4,
    queryChat = 5,
    queryContact = 6,
    queryMessages = 7,
    presence = 8,
    presenceSubscribe = 9,
    group = 10,
    read = 11,
    chat = 12,
    received = 13,
    picture = 14,
    status = 15,
    message = 16,
    queryActions = 17,
    block = 18,
    queryGroup = 19,
    queryPreview = 20,
    queryEmoji = 21,
    queryVCard = 29,
    queryStatus = 30,
    queryStatusUpdate = 31,
    queryLiveLocation = 33,
    queryLabel = 36,
    queryQuickReply = 39
}
export declare enum WAFlag {
    ignore = 128,
    acknowledge = 64,
    available = 32,
    unavailable = 16,
    expires = 8,
    skipOffline = 4
}
/** Tag used with binary queries */
export declare type WATag = [WAMetric, WAFlag];
export * as WAMessageProto from '../../WAMessage/WAMessage';
