/// <reference types="node" />
import WAConnection from '../WAConnection/WAConnection';
import { MessageStatusUpdate, PresenceUpdate, Presence, WABroadcastListInfo, WAProfilePictureChange } from './Constants';
import { WAMessage, WANode, WATag } from '../WAConnection/Constants';
export default class WhatsAppWebBase extends WAConnection {
    /** Set the callback for message status updates (when a message is delivered, read etc.) */
    setOnMessageStatusChange(callback: (update: MessageStatusUpdate) => void): void;
    /**
     * Set the callback for new/unread messages; if someone sends you a message, this callback will be fired
     * @param callbackOnMyMessages - should the callback be fired on a message you sent from the phone
     */
    setOnUnreadMessage(callbackOnMyMessages: boolean, callback: (m: WAMessage) => void): void;
    /** Set the callback for presence updates; if someone goes offline/online, this callback will be fired */
    setOnPresenceUpdate(callback: (p: PresenceUpdate) => void): void;
    /** Query whether a given number is registered on WhatsApp */
    isOnWhatsApp: (jid: string) => Promise<boolean>;
    /**
     * Tell someone about your presence -- online, typing, offline etc.
     * @param jid the ID of the person/group who you are updating
     * @param type your presence
     */
    updatePresence(jid: string | null, type: Presence): Promise<{
        status: number;
    }>;
    /** Request an update on the presence of a user */
    requestPresenceUpdate: (jid: string) => Promise<any>;
    /** Query the status of the person (see groupMetadata() for groups) */
    getStatus(jid?: string): Promise<{
        status: string;
    }>;
    setStatus(status: string): Promise<{
        status: number;
    }>;
    /** Get the URL to download the profile picture of a person/group */
    getProfilePicture(jid: string | null): Promise<string>;
    /** Get your contacts */
    getContacts(): Promise<any>;
    /** Get the stories of your contacts */
    getStories(): Promise<{
        unread: number;
        count: number;
        messages: WAMessage[];
    }[]>;
    /** Fetch your chats */
    getChats(): Promise<any>;
    /** Query broadcast list info */
    getBroadcastListInfo(jid: string): Promise<WABroadcastListInfo>;
    /** Delete the chat of a given ID */
    deleteChat(jid: string): Promise<{
        status: number;
    }>;
    /**
     * Check if your phone is connected
     * @param timeoutMs max time for the phone to respond
     */
    isPhoneConnected(timeoutMs?: number): Promise<boolean>;
    /**
     * Load the conversation with a group or person
     * @param count the number of messages to load
     * @param [indexMessage] the data for which message to offset the query by
     * @param [mostRecentFirst] retreive the most recent message first or retreive from the converation start
     */
    loadConversation(jid: string, count: number, indexMessage?: {
        id: string;
        fromMe: boolean;
    }, mostRecentFirst?: boolean): Promise<import("../../WAMessage/WAMessage").proto.WebMessageInfo[]>;
    /**
     * Load the entire friggin conversation with a group or person
     * @param onMessage callback for every message retreived
     * @param [chunkSize] the number of messages to load in a single request
     * @param [mostRecentFirst] retreive the most recent message first or retreive from the converation start
     */
    loadEntireConversation(jid: string, onMessage: (m: WAMessage) => void, chunkSize?: number, mostRecentFirst?: boolean): Promise<void>;
    updateProfilePicture(jid: string, img: Buffer): Promise<WAProfilePictureChange>;
    /** Generic function for action, set queries */
    setQuery(nodes: WANode[], binaryTags?: WATag, tag?: string): Promise<{
        status: number;
    }>;
}
