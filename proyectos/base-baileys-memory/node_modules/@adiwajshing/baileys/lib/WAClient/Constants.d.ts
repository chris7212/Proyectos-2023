/// <reference types="node" />
import { WAMessage } from '../WAConnection/Constants';
import { proto } from '../../WAMessage/WAMessage';
/**
 * set of statuses visible to other people; see updatePresence() in WhatsAppWeb.Send
 */
export declare enum Presence {
    available = "available",
    unavailable = "unavailable",
    composing = "composing",
    recording = "recording",
    paused = "paused"
}
/**
 * Status of a message sent or received
 */
export declare enum MessageStatus {
    sent = "sent",
    received = "received",
    read = "read"
}
/**
 * set of message types that are supported by the library
 */
export declare enum MessageType {
    text = "conversation",
    extendedText = "extendedTextMessage",
    contact = "contactMessage",
    location = "locationMessage",
    liveLocation = "liveLocationMessage",
    image = "imageMessage",
    video = "videoMessage",
    sticker = "stickerMessage",
    document = "documentMessage",
    audio = "audioMessage",
    product = "productMessage"
}
export declare enum ChatModification {
    archive = "archive",
    unarchive = "unarchive",
    pin = "pin",
    unpin = "unpin",
    mute = "mute",
    unmute = "unmute"
}
export declare const HKDFInfoKeys: {
    imageMessage: string;
    audioMessage: string;
    videoMessage: string;
    documentMessage: string;
    stickerMessage: string;
};
export declare enum Mimetype {
    jpeg = "image/jpeg",
    png = "image/png",
    mp4 = "video/mp4",
    gif = "video/gif",
    pdf = "application/pdf",
    ogg = "audio/ogg; codecs=opus",
    /** for stickers */
    webp = "image/webp"
}
export interface MessageOptions {
    quoted?: WAMessage;
    contextInfo?: WAContextInfo;
    timestamp?: Date;
    caption?: string;
    thumbnail?: string;
    mimetype?: Mimetype | string;
    validateID?: boolean;
    filename?: string;
}
export interface WABroadcastListInfo {
    status: number;
    name: string;
    recipients?: {
        id: string;
    }[];
}
export interface WAUrlInfo {
    'canonical-url': string;
    'matched-text': string;
    title: string;
    description: string;
    jpegThumbnail?: Buffer;
}
export interface WAProfilePictureChange {
    status: number;
    tag: string;
    eurl: string;
}
export interface MessageInfo {
    reads: {
        jid: string;
        t: string;
    }[];
    deliveries: {
        jid: string;
        t: string;
    }[];
}
export interface MessageStatusUpdate {
    from: string;
    to: string;
    /** Which participant caused the update (only for groups) */
    participant?: string;
    timestamp: Date;
    /** Message IDs read/delivered */
    ids: string[];
    /** Status of the Message IDs */
    type: WA_MESSAGE_STATUS_TYPE;
}
export declare enum GroupSettingChange {
    messageSend = "announcement",
    settingsChange = "locked"
}
export interface PresenceUpdate {
    id: string;
    participant?: string;
    t?: string;
    type?: Presence;
    deny?: boolean;
}
export declare const MediaPathMap: {
    imageMessage: string;
    videoMessage: string;
    documentMessage: string;
    audioMessage: string;
    stickerMessage: string;
};
export declare const MimetypeMap: {
    imageMessage: Mimetype;
    videoMessage: Mimetype;
    documentMessage: Mimetype;
    audioMessage: Mimetype;
    stickerMessage: Mimetype;
};
export interface WASendMessageResponse {
    status: number;
    messageID: string;
    message: WAMessage;
}
export interface WALocationMessage {
    degreesLatitude: number;
    degreesLongitude: number;
    address?: string;
}
export import WA_MESSAGE_STUB_TYPE = proto.WebMessageInfo.WEB_MESSAGE_INFO_STUBTYPE;
export import WA_MESSAGE_STATUS_TYPE = proto.WebMessageInfo.WEB_MESSAGE_INFO_STATUS;
/** Reverse stub type dictionary */
export declare const WAMessageType: Record<number, string>;
export declare type WAContactMessage = proto.ContactMessage;
export declare type WAMessageKey = proto.IMessageKey;
export declare type WATextMessage = proto.ExtendedTextMessage;
export declare type WAContextInfo = proto.IContextInfo;
