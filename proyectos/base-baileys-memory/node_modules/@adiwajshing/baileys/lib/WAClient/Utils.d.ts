/// <reference types="node" />
import { MessageType, MessageOptions } from './Constants';
import { WAMessage, WAMessageContent } from '../WAConnection/Constants';
export declare function validateJIDForSending(jid: string): void;
/**
 * Type of notification
 * @deprecated use WA_MESSAGE_STUB_TYPE instead
 * */
export declare function getNotificationType(message: WAMessage): [string, MessageType?];
/** generates all the keys required to encrypt/decrypt & sign a media message */
export declare function getMediaKeys(buffer: any, mediaType: MessageType): {
    iv: Buffer;
    cipherKey: Buffer;
    macKey: Buffer;
};
export declare const compressImage: (buffer: Buffer) => Promise<Buffer>;
export declare const generateProfilePicture: (buffer: Buffer) => Promise<{
    img: Buffer;
    preview: Buffer;
}>;
/** generates a thumbnail for a given media, if required */
export declare function generateThumbnail(buffer: Buffer, mediaType: MessageType, info: MessageOptions): Promise<void>;
/**
 * Decode a media message (video, image, document, audio) & return decrypted buffer
 * @param message the media message you want to decode
 */
export declare function decodeMediaMessageBuffer(message: WAMessageContent, fetchHeaders?: {
    [k: string]: string;
}): Promise<Buffer>;
export declare function extensionForMediaMessage(message: WAMessageContent): string;
/**
 * Decode a media message (video, image, document, audio) & save it to the given file
 * @deprecated use `client.downloadAndSaveMediaMessage`
 */
export declare function decodeMediaMessage(message: WAMessageContent, filename: string, attachExtension?: boolean): Promise<string>;
