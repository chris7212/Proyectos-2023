"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeMediaMessage = exports.extensionForMediaMessage = exports.decodeMediaMessageBuffer = exports.generateThumbnail = exports.generateProfilePicture = exports.compressImage = exports.getMediaKeys = exports.getNotificationType = exports.validateJIDForSending = void 0;
const Constants_1 = require("./Constants");
const jimp_1 = __importDefault(require("jimp"));
const fs = __importStar(require("fs"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const Constants_2 = require("../WAConnection/Constants");
const Utils_1 = require("../WAConnection/Utils");
const crypto_1 = require("crypto");
const child_process_1 = require("child_process");
function validateJIDForSending(jid) {
    const regexp = /^[0-9]{1,20}(-[0-9]{1,20}@g.us|@s.whatsapp.net)$/;
    if (!regexp.test(jid)) {
        throw new Error(`Invalid WhatsApp id: ${jid}
            1. Please ensure you suffix '@s.whatsapp.net' for individual numbers & '@g.us' for groups
            2. Please do not put any alphabets or special characters like a '+' in the number. A '-' symbol in groups is fine`);
    }
}
exports.validateJIDForSending = validateJIDForSending;
/**
 * Type of notification
 * @deprecated use WA_MESSAGE_STUB_TYPE instead
 * */
function getNotificationType(message) {
    if (message.message) {
        return ['message', Object.keys(message.message)[0]];
    }
    else if (message.messageStubType) {
        return [Constants_1.WAMessageType[message.messageStubType], null];
    }
    else {
        return ['unknown', null];
    }
}
exports.getNotificationType = getNotificationType;
/** generates all the keys required to encrypt/decrypt & sign a media message */
function getMediaKeys(buffer, mediaType) {
    if (typeof buffer === 'string') {
        buffer = Buffer.from(buffer.replace('data:;base64,', ''), 'base64');
    }
    // expand using HKDF to 112 bytes, also pass in the relevant app info
    const expandedMediaKey = Utils_1.hkdf(buffer, 112, Constants_1.HKDFInfoKeys[mediaType]);
    return {
        iv: expandedMediaKey.slice(0, 16),
        cipherKey: expandedMediaKey.slice(16, 48),
        macKey: expandedMediaKey.slice(48, 80),
    };
}
exports.getMediaKeys = getMediaKeys;
/** Extracts video thumb using FFMPEG */
const extractVideoThumb = async (path, destPath, time, size) => new Promise((resolve, reject) => {
    const cmd = `ffmpeg -ss ${time} -i ${path} -y -s ${size.width}x${size.height} -vframes 1 -f image2 ${destPath}`;
    child_process_1.exec(cmd, (err) => {
        if (err)
            reject(err);
        else
            resolve();
    });
});
exports.compressImage = async (buffer) => {
    const jimp = await jimp_1.default.read(buffer);
    return jimp.resize(48, 48).getBufferAsync(jimp_1.default.MIME_JPEG);
};
exports.generateProfilePicture = async (buffer) => {
    const jimp = await jimp_1.default.read(buffer);
    const min = Math.min(jimp.getWidth(), jimp.getHeight());
    const cropped = jimp.crop(0, 0, min, min);
    return {
        img: await cropped.resize(640, 640).getBufferAsync(jimp_1.default.MIME_JPEG),
        preview: await cropped.resize(96, 96).getBufferAsync(jimp_1.default.MIME_JPEG)
    };
};
/** generates a thumbnail for a given media, if required */
async function generateThumbnail(buffer, mediaType, info) {
    if (info.thumbnail === null || info.thumbnail) {
        // don't do anything if the thumbnail is already provided, or is null
        if (mediaType === Constants_1.MessageType.audio) {
            throw new Error('audio messages cannot have thumbnails');
        }
    }
    else if (mediaType === Constants_1.MessageType.image || mediaType === Constants_1.MessageType.sticker) {
        const buff = await exports.compressImage(buffer);
        info.thumbnail = buff.toString('base64');
    }
    else if (mediaType === Constants_1.MessageType.video) {
        const filename = './' + crypto_1.randomBytes(5).toString('hex') + '.mp4';
        const imgFilename = filename + '.jpg';
        fs.writeFileSync(filename, buffer);
        try {
            await extractVideoThumb(filename, imgFilename, '00:00:00', { width: 48, height: 48 });
            const buff = fs.readFileSync(imgFilename);
            info.thumbnail = buff.toString('base64');
            fs.unlinkSync(imgFilename);
        }
        catch (err) {
            console.log('could not generate video thumb: ' + err);
        }
        fs.unlinkSync(filename);
    }
}
exports.generateThumbnail = generateThumbnail;
/**
 * Decode a media message (video, image, document, audio) & return decrypted buffer
 * @param message the media message you want to decode
 */
async function decodeMediaMessageBuffer(message, fetchHeaders = {}) {
    var _a;
    /*
        One can infer media type from the key in the message
        it is usually written as [mediaType]Message. Eg. imageMessage, audioMessage etc.
    */
    const type = Object.keys(message)[0];
    if (!type) {
        throw new Constants_2.BaileysError('unknown message type', message);
    }
    if (type === Constants_1.MessageType.text || type === Constants_1.MessageType.extendedText) {
        throw new Constants_2.BaileysError('cannot decode text message', message);
    }
    if (type === Constants_1.MessageType.location || type === Constants_1.MessageType.liveLocation) {
        return new Buffer(message[type].jpegThumbnail);
    }
    let messageContent;
    if (message.productMessage) {
        const product = (_a = message.productMessage.product) === null || _a === void 0 ? void 0 : _a.productImage;
        if (!product)
            throw new Constants_2.BaileysError('product has no image', message);
        messageContent = product;
    }
    else {
        messageContent = message[type];
    }
    // download the message
    const headers = { Origin: 'https://web.whatsapp.com' };
    const fetched = await node_fetch_1.default(messageContent.url, { headers });
    const buffer = await fetched.buffer();
    if (buffer.length <= 10) {
        throw new Constants_2.BaileysError('Empty buffer returned. File has possibly been deleted from WA servers. Run `client.updateMediaMessage()` to refresh the url', { status: 404 });
    }
    const decryptedMedia = (type) => {
        // get the keys to decrypt the message
        const mediaKeys = getMediaKeys(messageContent.mediaKey, type); //getMediaKeys(Buffer.from(messageContent.mediaKey, 'base64'), type)
        // first part is actual file
        const file = buffer.slice(0, buffer.length - 10);
        // last 10 bytes is HMAC sign of file
        const mac = buffer.slice(buffer.length - 10, buffer.length);
        // sign IV+file & check for match with mac
        const testBuff = Buffer.concat([mediaKeys.iv, file]);
        const sign = Utils_1.hmacSign(testBuff, mediaKeys.macKey).slice(0, 10);
        // our sign should equal the mac
        if (!sign.equals(mac))
            throw new Error();
        return Utils_1.aesDecryptWithIV(file, mediaKeys.cipherKey, mediaKeys.iv); // decrypt media
    };
    const allTypes = [type, ...Object.keys(Constants_1.HKDFInfoKeys)];
    for (let i = 0; i < allTypes.length; i++) {
        try {
            const decrypted = decryptedMedia(allTypes[i]);
            if (i > 0) {
                console.log(`decryption of ${type} media with HKDF key of ${allTypes[i]}`);
            }
            return decrypted;
        }
        catch (_b) {
            if (i === 0) {
                console.log(`decryption of ${type} media with original HKDF key failed`);
            }
        }
    }
    throw new Constants_2.BaileysError('Decryption failed, HMAC sign does not match', { status: 400 });
}
exports.decodeMediaMessageBuffer = decodeMediaMessageBuffer;
function extensionForMediaMessage(message) {
    const getExtension = (mimetype) => mimetype.split(';')[0].split('/')[1];
    const type = Object.keys(message)[0];
    let extension;
    if (type === Constants_1.MessageType.location || type === Constants_1.MessageType.liveLocation) {
        extension = '.jpeg';
    }
    else {
        const messageContent = message[type];
        extension = getExtension(messageContent.mimetype);
    }
    return extension;
}
exports.extensionForMediaMessage = extensionForMediaMessage;
/**
 * Decode a media message (video, image, document, audio) & save it to the given file
 * @deprecated use `client.downloadAndSaveMediaMessage`
 */
async function decodeMediaMessage(message, filename, attachExtension = true) {
    const buffer = await decodeMediaMessageBuffer(message, {});
    const extension = extensionForMediaMessage(message);
    const trueFileName = attachExtension ? (filename + '.' + extension) : filename;
    fs.writeFileSync(trueFileName, buffer);
    return trueFileName;
}
exports.decodeMediaMessage = decodeMediaMessage;
