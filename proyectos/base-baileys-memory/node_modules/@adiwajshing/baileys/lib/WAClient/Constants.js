"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WAMessageType = exports.WA_MESSAGE_STATUS_TYPE = exports.WA_MESSAGE_STUB_TYPE = exports.MimetypeMap = exports.MediaPathMap = exports.GroupSettingChange = exports.Mimetype = exports.HKDFInfoKeys = exports.ChatModification = exports.MessageType = exports.MessageStatus = exports.Presence = void 0;
const WAMessage_1 = require("../../WAMessage/WAMessage");
/**
 * set of statuses visible to other people; see updatePresence() in WhatsAppWeb.Send
 */
var Presence;
(function (Presence) {
    Presence["available"] = "available";
    Presence["unavailable"] = "unavailable";
    Presence["composing"] = "composing";
    Presence["recording"] = "recording";
    Presence["paused"] = "paused";
})(Presence = exports.Presence || (exports.Presence = {}));
/**
 * Status of a message sent or received
 */
var MessageStatus;
(function (MessageStatus) {
    MessageStatus["sent"] = "sent";
    MessageStatus["received"] = "received";
    MessageStatus["read"] = "read";
})(MessageStatus = exports.MessageStatus || (exports.MessageStatus = {}));
/**
 * set of message types that are supported by the library
 */
var MessageType;
(function (MessageType) {
    MessageType["text"] = "conversation";
    MessageType["extendedText"] = "extendedTextMessage";
    MessageType["contact"] = "contactMessage";
    MessageType["location"] = "locationMessage";
    MessageType["liveLocation"] = "liveLocationMessage";
    MessageType["image"] = "imageMessage";
    MessageType["video"] = "videoMessage";
    MessageType["sticker"] = "stickerMessage";
    MessageType["document"] = "documentMessage";
    MessageType["audio"] = "audioMessage";
    MessageType["product"] = "productMessage";
})(MessageType = exports.MessageType || (exports.MessageType = {}));
var ChatModification;
(function (ChatModification) {
    ChatModification["archive"] = "archive";
    ChatModification["unarchive"] = "unarchive";
    ChatModification["pin"] = "pin";
    ChatModification["unpin"] = "unpin";
    ChatModification["mute"] = "mute";
    ChatModification["unmute"] = "unmute";
})(ChatModification = exports.ChatModification || (exports.ChatModification = {}));
exports.HKDFInfoKeys = {
    [MessageType.image]: 'WhatsApp Image Keys',
    [MessageType.audio]: 'WhatsApp Audio Keys',
    [MessageType.video]: 'WhatsApp Video Keys',
    [MessageType.document]: 'WhatsApp Document Keys',
    [MessageType.sticker]: 'WhatsApp Image Keys'
};
var Mimetype;
(function (Mimetype) {
    Mimetype["jpeg"] = "image/jpeg";
    Mimetype["png"] = "image/png";
    Mimetype["mp4"] = "video/mp4";
    Mimetype["gif"] = "video/gif";
    Mimetype["pdf"] = "application/pdf";
    Mimetype["ogg"] = "audio/ogg; codecs=opus";
    /** for stickers */
    Mimetype["webp"] = "image/webp";
})(Mimetype = exports.Mimetype || (exports.Mimetype = {}));
var GroupSettingChange;
(function (GroupSettingChange) {
    GroupSettingChange["messageSend"] = "announcement";
    GroupSettingChange["settingsChange"] = "locked";
})(GroupSettingChange = exports.GroupSettingChange || (exports.GroupSettingChange = {}));
// path to upload the media
exports.MediaPathMap = {
    imageMessage: '/mms/image',
    videoMessage: '/mms/video',
    documentMessage: '/mms/document',
    audioMessage: '/mms/audio',
    stickerMessage: '/mms/image',
};
// gives WhatsApp info to process the media
exports.MimetypeMap = {
    imageMessage: Mimetype.jpeg,
    videoMessage: Mimetype.mp4,
    documentMessage: Mimetype.pdf,
    audioMessage: Mimetype.ogg,
    stickerMessage: Mimetype.webp,
};
exports.WA_MESSAGE_STUB_TYPE = WAMessage_1.proto.WebMessageInfo.WEB_MESSAGE_INFO_STUBTYPE;
exports.WA_MESSAGE_STATUS_TYPE = WAMessage_1.proto.WebMessageInfo.WEB_MESSAGE_INFO_STATUS;
/** Reverse stub type dictionary */
exports.WAMessageType = function () {
    const types = exports.WA_MESSAGE_STUB_TYPE;
    const dict = {};
    Object.keys(types).forEach(element => dict[types[element]] = element);
    return dict;
}();
